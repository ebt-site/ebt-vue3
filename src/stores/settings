import { defineStore } from 'pinia'
import { logger } from 'log-instance'
import Utils from "../utils.mjs";
import { default as Settings } from "../../src/ebt-settings.mjs";

var id = 1;

export const useSettingsStore = defineStore('settings', {
  state: () => {
    let s = Object.assign({}, Settings.INITIAL_STATE);
    s.id = id++;
    let savedState = localStorage.settings;
    if (savedState) {
      try {
        savedState = JSON.parse(savedState);
      } catch(e) {
        logger.error(`SettingsStore.state() corrupt localStorage`, savedState);
        savedState = null;
      }
    }
    if (savedState) {
      Utils.assignTyped(s, savedState, Settings.INITIAL_STATE);
    }
    logger.debug(`SettingsStore.state() => `, s);
    return s;
  },
  actions: {
    saveSettings() {
      let saved = Utils.assignTyped({}, this, Settings.INITIAL_STATE);
      localStorage.settings = JSON.stringify(saved);
      this.isLocalStorage = true;
      logger.info("SettingsStore.saveSettings() localStorage.settings", 
        localStorage.settings);
    },
    clear() {
      delete localStorage.settings;
      Utils.assignTyped(this, Settings.INITIAL_STATE);
      logger.debug(`SettingsStore.clear()`, this);
    },
  },
  getters: {
    servers: (state)=>{ 
      let isDev = window.location.host.startsWith('localhost');;
      let servers = Settings.SERVERS.filter(svr => !svr.dev || isDev);
      return servers;
    },
    server: (state)=>{
      return state.servers.reduce((a,v) => {
        return v.value === state.serverUrl ? v : a;
      }, "unknown");
    },
  },

})
