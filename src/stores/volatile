import { defineStore } from 'pinia'
import { SuttaRef } from "scv-esm";
import { logger } from "log-instance";
import { ref } from "vue";
import Utils from "../utils.mjs";

const suttas = new Map();
const layout = ref();
const INITIAL_STATE = {
  waiting: false,
  suttas,
};

export const useVolatileStore = defineStore('volatile', {
  state: () => {
    let s = Object.assign({}, INITIAL_STATE);
    logger.debug(`VolatileStore.state() => `, s);
    return s;
  },
  getters: {
    layout() {
      let root = document.documentElement;
      let onresize = ()=>{
        layout.value = {
          w: root.clientWidth,
          h: root.clientHeight,
        }
      }
      if (layout.value == null) {
        document.defaultView.onresize = onresize;
        onresize();
      }
      return layout;
    },
  },
  actions: {
    addMlDoc(mld) {
      let { sutta_uid, lang, author_uid:author } = mld || {};
      let suttaRef = SuttaRef.create({sutta_uid, lang, author});
      let key = suttaRef.toString();
      logger.info("volatile.addMlDoc", {key, mld});
      suttas[key] = mld;
    },
    mlDocFromSuttaRef(suttaRefArg) {
      let suttaRef = SuttaRef.create(suttaRefArg);
      let key = suttaRef.toString();
      return suttas[key];
    },
    async fetchJson(url, options) {
      let res;
      if (this.waiting) {
        throw new Error("fetchJson() waiting... (request ignored)");
      }
      try {
        logger.info('fetchJson() url:', url);
        this.waiting = true;
        res = await fetch(url, options);
        logger.debug('fetchJson()', res);
        return res.ok ? await res.json() : res;
      } catch(e) {
        logger.error("fetchJson() ERROR:", res, e);
        res = { error: `ERROR: ${url.value} ${e.message}` };
      } finally {
        this.waiting = false;
      }
      return res;
    },
  },
})
